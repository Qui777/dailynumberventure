const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const axios = require("axios");
dotenv.config();
const app = express();
const PORT = process.env.PORT || 3e3;
const PAYPAL_CLIENT_ID = process.env.PAYPAL_CLIENT_ID;
const PAYPAL_CLIENT_SECRET = process.env.PAYPAL_CLIENT_SECRET;
const PAYPAL_BASE_URL = false ? "https://api-m.paypal.com" : "https://api-m.sandbox.paypal.com";
app.use(cors());
app.use(express.json());
async function generateAccessToken() {
  try {
    const auth = Buffer.from(`${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`).toString("base64");
    const response = await axios.post(
      `${PAYPAL_BASE_URL}/v1/oauth2/token`,
      "grant_type=client_credentials",
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "Authorization": `Basic ${auth}`
        }
      }
    );
    return response.data.access_token;
  } catch (error) {
    console.error("Failed to generate PayPal access token:", error);
    throw error;
  }
}
app.post("/api/payments/create-paypal-order", async (req, res) => {
  try {
    const { amount, currency = "USD" } = req.body;
    const accessToken = await generateAccessToken();
    const response = await axios.post(
      `${PAYPAL_BASE_URL}/v2/checkout/orders`,
      {
        intent: "CAPTURE",
        purchase_units: [
          {
            amount: {
              currency_code: currency,
              value: amount.toString()
            },
            description: `Number Quest Game Entry - $${amount}`
          }
        ],
        application_context: {
          shipping_preference: "NO_SHIPPING"
        }
      },
      {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`
        }
      }
    );
    return res.json({ id: response.data.id });
  } catch (error) {
    console.error("Error creating PayPal order:", error.response?.data || error.message);
    return res.status(500).json({ error: "Failed to create PayPal order" });
  }
});
app.post("/api/payments/capture-paypal-payment", async (req, res) => {
  try {
    const { orderId } = req.body;
    const accessToken = await generateAccessToken();
    const response = await axios.post(
      `${PAYPAL_BASE_URL}/v2/checkout/orders/${orderId}/capture`,
      {},
      {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`
        }
      }
    );
    const captureData = response.data;
    const paymentDetails = {
      id: captureData.id,
      status: captureData.status,
      amount: captureData.purchase_units[0].payments.captures[0].amount.value,
      currency: captureData.purchase_units[0].payments.captures[0].amount.currency_code,
      time: captureData.update_time
    };
    return res.json(paymentDetails);
  } catch (error) {
    console.error("Error capturing PayPal payment:", error.response?.data || error.message);
    return res.status(500).json({ error: "Failed to capture PayPal payment" });
  }
});
app.listen(PORT, () => {
  console.log(`ðŸ’¸ Payment Server running on port ${PORT}`);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG5jb25zdCBkb3RlbnYgPSByZXF1aXJlKCdkb3RlbnYnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuLy8gTG9hZCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmRvdGVudi5jb25maWcoKTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcblxuLy8gUGF5UGFsIGNvbmZpZ3VyYXRpb25cbmNvbnN0IFBBWVBBTF9DTElFTlRfSUQgPSBwcm9jZXNzLmVudi5QQVlQQUxfQ0xJRU5UX0lEO1xuY29uc3QgUEFZUEFMX0NMSUVOVF9TRUNSRVQgPSBwcm9jZXNzLmVudi5QQVlQQUxfQ0xJRU5UX1NFQ1JFVDtcbmNvbnN0IFBBWVBBTF9CQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbiAgPyAnaHR0cHM6Ly9hcGktbS5wYXlwYWwuY29tJ1xuICA6ICdodHRwczovL2FwaS1tLnNhbmRib3gucGF5cGFsLmNvbSc7XG5cbi8vIE1pZGRsZXdhcmVcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuXG4vLyBHZW5lcmF0ZSBhbiBhY2Nlc3MgdG9rZW4gZm9yIFBheVBhbCBBUElcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQWNjZXNzVG9rZW4oKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYXV0aCA9IEJ1ZmZlci5mcm9tKGAke1BBWVBBTF9DTElFTlRfSUR9OiR7UEFZUEFMX0NMSUVOVF9TRUNSRVR9YCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgIGAke1BBWVBBTF9CQVNFX1VSTH0vdjEvb2F1dGgyL3Rva2VuYCxcbiAgICAgICdncmFudF90eXBlPWNsaWVudF9jcmVkZW50aWFscycsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmFzaWMgJHthdXRofWBcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBQYXlQYWwgYWNjZXNzIHRva2VuOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBBUEkgZW5kcG9pbnQgdG8gY3JlYXRlIGEgUGF5UGFsIG9yZGVyXG5hcHAucG9zdCgnL2FwaS9wYXltZW50cy9jcmVhdGUtcGF5cGFsLW9yZGVyJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBhbW91bnQsIGN1cnJlbmN5ID0gJ1VTRCcgfSA9IHJlcS5ib2R5O1xuICAgIFxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYXdhaXQgZ2VuZXJhdGVBY2Nlc3NUb2tlbigpO1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgIGAke1BBWVBBTF9CQVNFX1VSTH0vdjIvY2hlY2tvdXQvb3JkZXJzYCxcbiAgICAgIHtcbiAgICAgICAgaW50ZW50OiAnQ0FQVFVSRScsXG4gICAgICAgIHB1cmNoYXNlX3VuaXRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgYW1vdW50OiB7XG4gICAgICAgICAgICAgIGN1cnJlbmN5X2NvZGU6IGN1cnJlbmN5LFxuICAgICAgICAgICAgICB2YWx1ZTogYW1vdW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYE51bWJlciBRdWVzdCBHYW1lIEVudHJ5IC0gJCR7YW1vdW50fWBcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFwcGxpY2F0aW9uX2NvbnRleHQ6IHtcbiAgICAgICAgICBzaGlwcGluZ19wcmVmZXJlbmNlOiAnTk9fU0hJUFBJTkcnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2FjY2Vzc1Rva2VufWBcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgXG4gICAgcmV0dXJuIHJlcy5qc29uKHsgaWQ6IHJlc3BvbnNlLmRhdGEuaWQgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgUGF5UGFsIG9yZGVyOicsIGVycm9yLnJlc3BvbnNlPy5kYXRhIHx8IGVycm9yLm1lc3NhZ2UpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGNyZWF0ZSBQYXlQYWwgb3JkZXInIH0pO1xuICB9XG59KTtcblxuLy8gQVBJIGVuZHBvaW50IHRvIGNhcHR1cmUgYSBQYXlQYWwgcGF5bWVudFxuYXBwLnBvc3QoJy9hcGkvcGF5bWVudHMvY2FwdHVyZS1wYXlwYWwtcGF5bWVudCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgb3JkZXJJZCB9ID0gcmVxLmJvZHk7XG4gICAgXG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSBhd2FpdCBnZW5lcmF0ZUFjY2Vzc1Rva2VuKCk7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFxuICAgICAgYCR7UEFZUEFMX0JBU0VfVVJMfS92Mi9jaGVja291dC9vcmRlcnMvJHtvcmRlcklkfS9jYXB0dXJlYCxcbiAgICAgIHt9LFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIFxuICAgIGNvbnN0IGNhcHR1cmVEYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICBcbiAgICAvLyBGb3JtYXQgdGhlIHJlc3BvbnNlXG4gICAgY29uc3QgcGF5bWVudERldGFpbHMgPSB7XG4gICAgICBpZDogY2FwdHVyZURhdGEuaWQsXG4gICAgICBzdGF0dXM6IGNhcHR1cmVEYXRhLnN0YXR1cyxcbiAgICAgIGFtb3VudDogY2FwdHVyZURhdGEucHVyY2hhc2VfdW5pdHNbMF0ucGF5bWVudHMuY2FwdHVyZXNbMF0uYW1vdW50LnZhbHVlLFxuICAgICAgY3VycmVuY3k6IGNhcHR1cmVEYXRhLnB1cmNoYXNlX3VuaXRzWzBdLnBheW1lbnRzLmNhcHR1cmVzWzBdLmFtb3VudC5jdXJyZW5jeV9jb2RlLFxuICAgICAgdGltZTogY2FwdHVyZURhdGEudXBkYXRlX3RpbWVcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiByZXMuanNvbihwYXltZW50RGV0YWlscyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FwdHVyaW5nIFBheVBhbCBwYXltZW50OicsIGVycm9yLnJlc3BvbnNlPy5kYXRhIHx8IGVycm9yLm1lc3NhZ2UpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGNhcHR1cmUgUGF5UGFsIHBheW1lbnQnIH0pO1xuICB9XG59KTtcblxuLy8gU3RhcnQgdGhlIHNlcnZlclxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGDwn5K4IFBheW1lbnQgU2VydmVyIHJ1bm5pbmcgb24gcG9ydCAke1BPUlR9YCk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxVQUFVLFFBQVEsU0FBUztBQUNqQyxNQUFNLE9BQU8sUUFBUSxNQUFNO0FBQzNCLE1BQU0sU0FBUyxRQUFRLFFBQVE7QUFDL0IsTUFBTSxRQUFRLFFBQVEsT0FBTztBQUc3QixPQUFPLE9BQU87QUFFZCxNQUFNLE1BQU0sUUFBUTtBQUNwQixNQUFNLE9BQU8sUUFBUSxJQUFJLFFBQVE7QUFHakMsTUFBTSxtQkFBbUIsUUFBUSxJQUFJO0FBQ3JDLE1BQU0sdUJBQXVCLFFBQVEsSUFBSTtBQUN6QyxNQUFNLGtCQUFrQixRQUNwQiw2QkFDQTtBQUdKLElBQUksSUFBSSxLQUFLLENBQUM7QUFDZCxJQUFJLElBQUksUUFBUSxLQUFLLENBQUM7QUFHdEIsZUFBZSxzQkFBc0I7QUFDbkMsTUFBSTtBQUNGLFVBQU0sT0FBTyxPQUFPLEtBQUssR0FBRyxnQkFBZ0IsSUFBSSxvQkFBb0IsRUFBRSxFQUFFLFNBQVMsUUFBUTtBQUN6RixVQUFNLFdBQVcsTUFBTSxNQUFNO0FBQUEsTUFDM0IsR0FBRyxlQUFlO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDRSxTQUFTO0FBQUEsVUFDUCxnQkFBZ0I7QUFBQSxVQUNoQixpQkFBaUIsU0FBUyxJQUFJO0FBQUEsUUFDaEM7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLFdBQU8sU0FBUyxLQUFLO0FBQUEsRUFDdkIsU0FBUyxPQUFPO0FBQ2QsWUFBUSxNQUFNLDJDQUEyQyxLQUFLO0FBQzlELFVBQU07QUFBQSxFQUNSO0FBQ0Y7QUFHQSxJQUFJLEtBQUsscUNBQXFDLE9BQU8sS0FBSyxRQUFRO0FBQ2hFLE1BQUk7QUFDRixVQUFNLEVBQUUsUUFBUSxXQUFXLE1BQU0sSUFBSSxJQUFJO0FBRXpDLFVBQU0sY0FBYyxNQUFNLG9CQUFvQjtBQUU5QyxVQUFNLFdBQVcsTUFBTSxNQUFNO0FBQUEsTUFDM0IsR0FBRyxlQUFlO0FBQUEsTUFDbEI7QUFBQSxRQUNFLFFBQVE7QUFBQSxRQUNSLGdCQUFnQjtBQUFBLFVBQ2Q7QUFBQSxZQUNFLFFBQVE7QUFBQSxjQUNOLGVBQWU7QUFBQSxjQUNmLE9BQU8sT0FBTyxTQUFTO0FBQUEsWUFDekI7QUFBQSxZQUNBLGFBQWEsOEJBQThCLE1BQU07QUFBQSxVQUNuRDtBQUFBLFFBQ0Y7QUFBQSxRQUNBLHFCQUFxQjtBQUFBLFVBQ25CLHFCQUFxQjtBQUFBLFFBQ3ZCO0FBQUEsTUFDRjtBQUFBLE1BQ0E7QUFBQSxRQUNFLFNBQVM7QUFBQSxVQUNQLGdCQUFnQjtBQUFBLFVBQ2hCLGlCQUFpQixVQUFVLFdBQVc7QUFBQSxRQUN4QztBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBRUEsV0FBTyxJQUFJLEtBQUssRUFBRSxJQUFJLFNBQVMsS0FBSyxHQUFHLENBQUM7QUFBQSxFQUMxQyxTQUFTLE9BQU87QUFDZCxZQUFRLE1BQU0sZ0NBQWdDLE1BQU0sVUFBVSxRQUFRLE1BQU0sT0FBTztBQUNuRixXQUFPLElBQUksT0FBTyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sZ0NBQWdDLENBQUM7QUFBQSxFQUN4RTtBQUNGLENBQUM7QUFHRCxJQUFJLEtBQUssd0NBQXdDLE9BQU8sS0FBSyxRQUFRO0FBQ25FLE1BQUk7QUFDRixVQUFNLEVBQUUsUUFBUSxJQUFJLElBQUk7QUFFeEIsVUFBTSxjQUFjLE1BQU0sb0JBQW9CO0FBRTlDLFVBQU0sV0FBVyxNQUFNLE1BQU07QUFBQSxNQUMzQixHQUFHLGVBQWUsdUJBQXVCLE9BQU87QUFBQSxNQUNoRCxDQUFDO0FBQUEsTUFDRDtBQUFBLFFBQ0UsU0FBUztBQUFBLFVBQ1AsZ0JBQWdCO0FBQUEsVUFDaEIsaUJBQWlCLFVBQVUsV0FBVztBQUFBLFFBQ3hDO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFFQSxVQUFNLGNBQWMsU0FBUztBQUc3QixVQUFNLGlCQUFpQjtBQUFBLE1BQ3JCLElBQUksWUFBWTtBQUFBLE1BQ2hCLFFBQVEsWUFBWTtBQUFBLE1BQ3BCLFFBQVEsWUFBWSxlQUFlLENBQUMsRUFBRSxTQUFTLFNBQVMsQ0FBQyxFQUFFLE9BQU87QUFBQSxNQUNsRSxVQUFVLFlBQVksZUFBZSxDQUFDLEVBQUUsU0FBUyxTQUFTLENBQUMsRUFBRSxPQUFPO0FBQUEsTUFDcEUsTUFBTSxZQUFZO0FBQUEsSUFDcEI7QUFFQSxXQUFPLElBQUksS0FBSyxjQUFjO0FBQUEsRUFDaEMsU0FBUyxPQUFPO0FBQ2QsWUFBUSxNQUFNLG1DQUFtQyxNQUFNLFVBQVUsUUFBUSxNQUFNLE9BQU87QUFDdEYsV0FBTyxJQUFJLE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLG1DQUFtQyxDQUFDO0FBQUEsRUFDM0U7QUFDRixDQUFDO0FBR0QsSUFBSSxPQUFPLE1BQU0sTUFBTTtBQUNyQixVQUFRLElBQUkscUNBQXFDLElBQUksRUFBRTtBQUN6RCxDQUFDOyIsIm5hbWVzIjpbXX0=