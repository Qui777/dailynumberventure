/**
 * Utilities for managing the daily number generation and retrieval
 */ // Check if a new daily number should be generated (at 7:55 AM or if none exists)
export const shouldGenerateNewDailyNumber = ()=>{
    const lastGeneratedTime = localStorage.getItem('lastDailyNumberGenerated');
    const now = new Date();
    // If we've never generated a number or it's 7:55 AM, generate a new one
    if (!lastGeneratedTime) {
        return true;
    }
    const lastGenerated = new Date(lastGeneratedTime);
    const isNewDay = now.getDate() !== lastGenerated.getDate() || now.getMonth() !== lastGenerated.getMonth() || now.getFullYear() !== lastGenerated.getFullYear();
    const is755AM = now.getHours() === 7 && now.getMinutes() === 55;
    return isNewDay || is755AM;
};
// Generate a new daily number within a specific range
export const generateDailyNumberForRange = (key, min, max)=>{
    const dailyNumber = Math.floor(Math.random() * (max - min + 1)) + min;
    localStorage.setItem(`dailyNumber_${key}`, dailyNumber.toString());
    localStorage.setItem(`lastDailyNumberGenerated_${key}`, new Date().toISOString());
    return dailyNumber;
};
// Generate a new daily number and save it to localStorage (original function for backwards compatibility)
export const generateDailyNumber = ()=>{
    return generateDailyNumberForRange('1-1000', 1, 1000);
};
// Get the current daily number for a specific range or generate a new one if needed
export const getDailyNumberForRange = (key, min, max)=>{
    // Check if a custom number has been set by the owner
    const customNumber = localStorage.getItem(`customDailyNumber_${key}`);
    if (customNumber) {
        return parseInt(customNumber, 10);
    }
    if (shouldGenerateNewDailyNumberForRange(key)) {
        return generateDailyNumberForRange(key, min, max);
    }
    const storedNumber = localStorage.getItem(`dailyNumber_${key}`);
    return storedNumber ? parseInt(storedNumber, 10) : generateDailyNumberForRange(key, min, max);
};
// Check if a new daily number should be generated for a specific range
export const shouldGenerateNewDailyNumberForRange = (key)=>{
    const lastGeneratedTime = localStorage.getItem(`lastDailyNumberGenerated_${key}`);
    const now = new Date();
    if (!lastGeneratedTime) {
        return true;
    }
    const lastGenerated = new Date(lastGeneratedTime);
    const isNewDay = now.getDate() !== lastGenerated.getDate() || now.getMonth() !== lastGenerated.getMonth() || now.getFullYear() !== lastGenerated.getFullYear();
    const is755AM = now.getHours() === 7 && now.getMinutes() === 55;
    return isNewDay || is755AM;
};
// Get the current daily number or generate a new one if needed (original function for backwards compatibility)
export const getDailyNumber = ()=>{
    return getDailyNumberForRange('1-1000', 1, 1000);
};
// Reset the daily number for a specific range (for admin/owner use)
export const resetDailyNumberForRange = (key)=>{
    localStorage.removeItem(`dailyNumber_${key}`);
    localStorage.removeItem(`lastDailyNumberGenerated_${key}`);
    localStorage.removeItem(`customDailyNumber_${key}`);
};
// Reset the daily number (for admin/owner use, original function for backwards compatibility)
export const resetDailyNumber = ()=>{
    resetDailyNumberForRange('1-1000');
};
// Set a custom daily number for a specific range (for admin/owner use only)
export const setCustomDailyNumberForRange = (key, number)=>{
    localStorage.setItem(`customDailyNumber_${key}`, number.toString());
    localStorage.setItem(`lastDailyNumberGenerated_${key}`, new Date().toISOString());
};
// Set a custom daily number (for admin/owner use only, original function for backwards compatibility)
export const setCustomDailyNumber = (number)=>{
    setCustomDailyNumberForRange('1-1000', number);
};
// Get all daily numbers for all ranges
export const getAllDailyNumbers = ()=>{
    return {
        '1-100': getDailyNumberForRange('1-100', 1, 100),
        '1-500': getDailyNumberForRange('1-500', 1, 500),
        '1-1000': getDailyNumberForRange('1-1000', 1, 1000)
    };
};
// Set all custom daily numbers at once (for admin/owner use only)
export const setAllCustomDailyNumbers = (numbers)=>{
    if (numbers['1-100']) setCustomDailyNumberForRange('1-100', numbers['1-100']);
    if (numbers['1-500']) setCustomDailyNumberForRange('1-500', numbers['1-500']);
    if (numbers['1-1000']) setCustomDailyNumberForRange('1-1000', numbers['1-1000']);
};

//# sourceMappingURL=data:application/json;base64,